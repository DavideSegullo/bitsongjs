import { validateUploadPayload } from '../utils';
import { StorageProvider } from '@bitsongjs/storage';
import { NFTUploadResponse } from '../types';

export class NFTUploader {
	constructor(private provider: StorageProvider) {}

	/**
	 * Returns the CID
	 * @param images - File array to upload on ipfs (It's related to Web File api)
	 * @param rawMetadata - File array to upload on ipfs (It's related to Web File api)
	 * @returns Returns the CID generated by the provider
	 */
	async upload(images: File[], rawMetadata: File[]): Promise<NFTUploadResponse> {
		const imagesWithPrefix: File[] = [];

		for (const image of images) {
			const file = new File([image], `/images/${image.name}`, {
				type: image.type,
			});

			imagesWithPrefix.push(file);
		}

		const metadataWithPrefix: File[] = [];

		for (const meta of rawMetadata) {
			const file = new File([meta], `/metadata/${meta.name}`, { type: meta.type });

			metadataWithPrefix.push(file);
		}

		validateUploadPayload(imagesWithPrefix, metadataWithPrefix);

		const imagesCID = await this.provider.upload(imagesWithPrefix);

		const metadata: File[] = [];

		for (const [index, data] of metadataWithPrefix.entries()) {
			const txtData = await data.text();
			const jsonData = JSON.parse(txtData);

			jsonData.image = `ipfs://${imagesCID}${imagesWithPrefix[index].name}`;

			const file = new File([JSON.stringify(jsonData)], data.name, {
				type: 'application/json',
			});

			metadata.push(file);
		}

		const metadataCID = await this.provider.upload(metadata);

		const uri = `ipfs://${metadataCID}`;

		return {
			uri,
		};
	}
}
